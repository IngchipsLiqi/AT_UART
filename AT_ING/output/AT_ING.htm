<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\AT_ING.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\AT_ING.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Fri Jul  7 18:17:40 2023
<BR><P>
<H3>Maximum Stack Usage =        272 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
app_main &rArr; SYSCTRL_Init &rArr; flash_get_factory_calib_data &rArr; flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[a]">Reset_Handler</a> from startup_ing91600.o(.text) referenced from startup_ing91600.o(RESET)
 <LI><a href="#[c]">__scatterload</a> from init.o(.text) referenced from startup_ing91600.o(.text)
 <LI><a href="#[1d]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[d]">app_main</a> from main.o(.text.app_main) referenced from startup_ing91600.o(.text)
 <LI><a href="#[14]">att_read_callback</a> from profile.o(.text.att_read_callback) referenced 2 times from profile.o(.text.setup_profile)
 <LI><a href="#[15]">att_write_callback</a> from profile.o(.text.att_write_callback) referenced 2 times from profile.o(.text.setup_profile)
 <LI><a href="#[2]">bt_at_handle_addr</a> from bt_at_cmd_parse.o(.text.bt_at_handle_addr) referenced 2 times from bt_at_cmd_parse.o(.data.at_set_body)
 <LI><a href="#[0]">bt_at_handle_cona</a> from bt_at_cmd_parse.o(.text.bt_at_handle_cona) referenced 2 times from bt_at_cmd_parse.o(.data.at_set_body)
 <LI><a href="#[1]">bt_at_handle_role</a> from bt_at_cmd_parse.o(.text.bt_at_handle_role) referenced 2 times from bt_at_cmd_parse.o(.data.at_set_body)
 <LI><a href="#[e]">bt_cmd_data_uart1_isr</a> from app.o(.text.bt_cmd_data_uart1_isr) referenced 2 times from app.o(.text.app_setup_uart1_isr)
 <LI><a href="#[19]">btstack_callback</a> from throughput_service.o(.text.btstack_callback) referenced 2 times from throughput_service.o(.text.throughput_descriptor_discovery_callback)
 <LI><a href="#[8]">cb_assertion</a> from main.o(.text.cb_assertion) referenced 2 times from main.o(.data.evt_cb_table)
 <LI><a href="#[7]">cb_hard_fault</a> from main.o(.text.cb_hard_fault) referenced 2 times from main.o(.data.evt_cb_table)
 <LI><a href="#[9]">cb_heap_out_of_mem</a> from main.o(.text.cb_heap_out_of_mem) referenced 2 times from main.o(.data.evt_cb_table)
 <LI><a href="#[3]">cb_putc</a> from main.o(.ramfunc) referenced 2 times from main.o(.data.evt_cb_table)
 <LI><a href="#[10]">cmd_process_task</a> from bt_cmd_data_uart_io_adp.o(.text.cmd_process_task) referenced 2 times from bt_cmd_data_uart_io_adp.o(.text.bt_cmd_data_process_init)
 <LI><a href="#[13]">conn_timer_callback</a> from profile.o(.text.conn_timer_callback) referenced 2 times from profile.o(.text.setup_profile)
 <LI><a href="#[11]">enter_low_power_timer_callback</a> from low_power.o(.text.enter_low_power_timer_callback) referenced 2 times from low_power.o(.text.low_power_create_timer)
 <LI><a href="#[12]">low_power_task</a> from low_power.o(.text.low_power_task) referenced 2 times from low_power.o(.text.low_power_create_timer)
 <LI><a href="#[5]">m_on_deep_sleep_wakeup</a> from main.o(.ramfunc) referenced 2 times from main.o(.data.evt_cb_table)
 <LI><a href="#[6]">m_query_deep_sleep_allowed</a> from main.o(.ramfunc) referenced 2 times from main.o(.data.evt_cb_table)
 <LI><a href="#[b]">main</a> from startup_ing91600.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[f]">main_cmd_data_timer_task</a> from bt_cmd_data_uart_io_adp.o(.text.main_cmd_data_timer_task) referenced 2 times from bt_cmd_data_uart_io_adp.o(.text.bt_cmd_data_process_init)
 <LI><a href="#[4]">setup_profile</a> from profile.o(.text.setup_profile) referenced 2 times from main.o(.data.evt_cb_table)
 <LI><a href="#[1c]">stack_on_first_wake_up</a> from profile.o(.text.stack_on_first_wake_up) referenced 2 times from profile.o(.text.user_packet_handler)
 <LI><a href="#[1b]">throughput_characteristic_discovery_callback</a> from throughput_service.o(.text.throughput_characteristic_discovery_callback) referenced 2 times from throughput_service.o(.text.throughput_service_discovery_callback)
 <LI><a href="#[17]">throughput_descriptor_discovery_callback</a> from throughput_service.o(.text.throughput_descriptor_discovery_callback) referenced 2 times from throughput_service.o(.text.throughput_characteristic_discovery_callback)
 <LI><a href="#[18]">throughput_notification_listen_handler</a> from throughput_service.o(.text.throughput_notification_listen_handler) referenced 2 times from throughput_service.o(.text.throughput_descriptor_discovery_callback)
 <LI><a href="#[1a]">throughput_service_discovery_callback</a> from throughput_service.o(.text.throughput_service_discovery_callback) referenced 2 times from throughput_service.o(.text.throughput_discover_services)
 <LI><a href="#[16]">user_packet_handler</a> from profile.o(.text.user_packet_handler) referenced 2 times from profile.o(.text.setup_profile)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c4]"></a>att_dispatch_client_request_can_send_now_event</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_i_am_master_send_data
</UL>

<P><STRONG><a name="[c7]"></a>att_server_can_send_packet_now</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_i_am_slave_send_data
</UL>

<P><STRONG><a name="[c6]"></a>att_server_get_mtu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_i_am_slave_send_data
</UL>

<P><STRONG><a name="[b1]"></a>att_server_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[c9]"></a>att_server_notify</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_i_am_slave_send_data
</UL>

<P><STRONG><a name="[b3]"></a>att_server_register_packet_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[c8]"></a>att_server_request_can_send_now_event</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_i_am_slave_send_data
</UL>

<P><STRONG><a name="[da]"></a>att_set_db</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[96]"></a>big_endian_read_32</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sig_short_uuid
</UL>

<P><STRONG><a name="[73]"></a>btstack_push_user_msg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_on_first_wake_up
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_timer_callback
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_at_handle_role
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_at_handle_cona
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_at_handle_addr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process_task
</UL>

<P><STRONG><a name="[69]"></a>gap_add_whitelist</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_connect
</UL>

<P><STRONG><a name="[67]"></a>gap_clear_white_lists</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_connect
</UL>

<P><STRONG><a name="[89]"></a>gap_create_connection_cancel</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_initiating
</UL>

<P><STRONG><a name="[68]"></a>gap_disconnect</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_connect
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_service_discovery_callback
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_characteristic_discovery_callback
</UL>

<P><STRONG><a name="[9f]"></a>gap_ext_create_connection</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initiating
</UL>

<P><STRONG><a name="[d7]"></a>gap_read_remote_used_features</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[ab]"></a>gap_set_adv_set_random_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
</UL>

<P><STRONG><a name="[ad]"></a>gap_set_ext_adv_data</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
</UL>

<P><STRONG><a name="[9e]"></a>gap_set_ext_adv_enable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_user_msg_handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_am_slave_disconnected_master
</UL>

<P><STRONG><a name="[ac]"></a>gap_set_ext_adv_para</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
</UL>

<P><STRONG><a name="[66]"></a>gap_set_ext_scan_enable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_connect
</UL>

<P><STRONG><a name="[d3]"></a>gap_set_ext_scan_para</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[ae]"></a>gap_set_ext_scan_response_data</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
</UL>

<P><STRONG><a name="[d2]"></a>gap_set_random_device_address</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[b6]"></a>gatt_client_discover_characteristic_descriptors</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_characteristic_discovery_callback
</UL>

<P><STRONG><a name="[cc]"></a>gatt_client_discover_characteristics_for_service</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_service_discovery_callback
</UL>

<P><STRONG><a name="[bd]"></a>gatt_client_discover_primary_services_by_uuid128</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_discover_services
</UL>

<P><STRONG><a name="[c0]"></a>gatt_client_get_mtu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_i_am_master_send_data
</UL>

<P><STRONG><a name="[d6]"></a>gatt_client_is_ready</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[bb]"></a>gatt_client_listen_for_characteristic_value_updates</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_descriptor_discovery_callback
</UL>

<P><STRONG><a name="[bc]"></a>gatt_client_write_characteristic_descriptor_using_descriptor_handle</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_descriptor_discovery_callback
</UL>

<P><STRONG><a name="[c2]"></a>gatt_client_write_value_of_characteristic_without_response</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_i_am_master_send_data
</UL>

<P><STRONG><a name="[b2]"></a>hci_add_event_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[af]"></a>ll_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_pll_clk_and_sleep_para
</UL>

<P><STRONG><a name="[db]"></a>ll_hint_on_ce_len</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[a5]"></a>platform_32k_rc_auto_tune</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_user_msg_handler
</UL>

<P><STRONG><a name="[d8]"></a>platform_calibrate_32k</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[48]"></a>platform_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_pll_clk_and_sleep_para
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_user_msg_handler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_task
</UL>

<P><STRONG><a name="[4d]"></a>platform_printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_dev_info
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_service_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_addr
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_user_msg_handler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initiating
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_on_deep_sleep_wakeup (via Veneer)
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_heap_out_of_mem
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hard_fault
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_assertion
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_service_discovery_callback
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_descriptor_discovery_callback
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_characteristic_discovery_callback
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_callback
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_task
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_enter_saving
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_rx_cmd_process
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_print_buf_state
</UL>

<P><STRONG><a name="[a8]"></a>platform_rand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_load_private_flash_data
</UL>

<P><STRONG><a name="[4a]"></a>platform_set_evt_callback_table</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[54]"></a>platform_set_irq_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_setup_uart1_isr
</UL>

<P><STRONG><a name="[d4]"></a>platform_set_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[5c]"></a>reverse_128</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_service_uuid128
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_characteristic_uuid128
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_attribute_uuid128
</UL>

<P><STRONG><a name="[95]"></a>uuid_has_bluetooth_prefix</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sig_short_uuid
</UL>

<P><STRONG><a name="[7b]"></a>xQueueGenericCreate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_process_init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_create_timer
</UL>

<P><STRONG><a name="[97]"></a>xQueueGiveFromISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_exit_saving
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;give_sem_send_data_by_com
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;give_sem_send_data_by_ble
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;give_sem_process_cmd
</UL>

<P><STRONG><a name="[8a]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_task
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process_task
</UL>

<P><STRONG><a name="[7c]"></a>xTaskCreate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_process_init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_create_timer
</UL>

<P><STRONG><a name="[a0]"></a>xTaskGetTickCount</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_main_cmd_data
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initiating
</UL>

<P><STRONG><a name="[a3]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_start_timer
</UL>

<P><STRONG><a name="[7a]"></a>xTimerCreate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_process_init
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_create_timer
</UL>

<P><STRONG><a name="[99]"></a>xTimerGenericCommand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_main_cmd_data
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initiating
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_am_master_connected_slave
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_start_timer
</UL>

<P><STRONG><a name="[1e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[f0]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[20]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f1]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[f2]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[f3]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f4]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[f5]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[f6]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_service_discovery_callback
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_descriptor_discovery_callback
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_characteristic_discovery_callback
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_ble_recv_data
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_attribute_uuid16
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_attribute_uuid128
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_load_private_flash_data
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_load_private_flash_data
</UL>

<P><STRONG><a name="[86]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_rx_cmd_process
</UL>

<P><STRONG><a name="[6c]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_characteristic_discovery_callback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baec_msg_handle
</UL>

<P><STRONG><a name="[21]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[26]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[27]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[28]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[29]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[22]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[f9]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[fa]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[24]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2c]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[fc]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>GIO_ConfigIntSource</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, peripheral_gpio.o(.text.GIO_ConfigIntSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GIO_ConfigIntSource &rArr; map_int_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_int_mode
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_setup_peripherals_before_sleep
</UL>

<P><STRONG><a name="[30]"></a>GIO_EnableDeepSleepWakeupSource</STRONG> (Thumb, 466 bytes, Stack size 16 bytes, peripheral_gpio.o(.text.GIO_EnableDeepSleepWakeupSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GIO_EnableDeepSleepWakeupSource &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_setup_peripherals_before_sleep
</UL>

<P><STRONG><a name="[31]"></a>GIO_EnableRetentionGroupA</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, peripheral_gpio.o(.text.GIO_EnableRetentionGroupA))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GIO_EnableRetentionGroupA &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_setup_peripherals
</UL>

<P><STRONG><a name="[32]"></a>GIO_EnableRetentionGroupB</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, peripheral_gpio.o(.text.GIO_EnableRetentionGroupB))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GIO_EnableRetentionGroupB &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_setup_peripherals
</UL>

<P><STRONG><a name="[33]"></a>GIO_SetDirection</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, peripheral_gpio.o(.text.GIO_SetDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GIO_SetDirection &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_setup_peripherals_before_sleep
</UL>

<P><STRONG><a name="[52]"></a>GIO_WriteValue</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, peripheral_gpio.o(.text.GIO_WriteValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GIO_WriteValue
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_setup_peripherals_before_sleep
</UL>

<P><STRONG><a name="[51]"></a>PINCTRL_Pull</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, peripheral_pinctrl.o(.text.PINCTRL_Pull))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PINCTRL_Pull
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_config_uart1_com
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_setup_peripherals_before_sleep
</UL>

<P><STRONG><a name="[38]"></a>PINCTRL_SelUartRxdIn</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, peripheral_pinctrl.o(.text.PINCTRL_SelUartRxdIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = PINCTRL_SelUartRxdIn &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelInput
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_config_uart1_com
</UL>

<P><STRONG><a name="[37]"></a>PINCTRL_SetPadMux</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, peripheral_pinctrl.o(.text.PINCTRL_SetPadMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;source_id_on_pin
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelInput
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_config_uart1_com
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_setup_peripherals_before_sleep
</UL>

<P><STRONG><a name="[3a]"></a>SYSCTRL_ClearClkGate</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClearClkGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>

<P><STRONG><a name="[3c]"></a>SYSCTRL_ClearClkGateMulti</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClearClkGateMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_setup_peripherals
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_config_uart1_com
</UL>

<P><STRONG><a name="[b0]"></a>SYSCTRL_EnableConfigClocksAfterWakeup</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_EnableConfigClocksAfterWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCTRL_EnableConfigClocksAfterWakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_pll_clk_and_sleep_para
</UL>

<P><STRONG><a name="[3e]"></a>SYSCTRL_EnableSlowRC</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, peripheral_sysctrl.o(.text.SYSCTRL_EnableSlowRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SYSCTRL_EnableSlowRC &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_pll_clk_and_sleep_para
</UL>

<P><STRONG><a name="[40]"></a>SYSCTRL_Init</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, peripheral_sysctrl.o(.text.SYSCTRL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SYSCTRL_Init &rArr; flash_get_factory_calib_data &rArr; flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SetLDOOutput
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_factory_calib_data
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[42]"></a>SYSCTRL_SetLDOOutput</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_SetLDOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYSCTRL_SetLDOOutput &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
</UL>

<P><STRONG><a name="[8e]"></a>TMR_WatchDogRestart</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, peripheral_timer.o(.text.TMR_WatchDogRestart))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_low_power_timer_callback
</UL>

<P><STRONG><a name="[81]"></a>UART_SendData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, peripheral_uart.o(.text.UART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_out
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_handle_task_send_data
</UL>

<P><STRONG><a name="[44]"></a>apUART_BaudRateSet</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, peripheral_uart.o(.text.apUART_BaudRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>

<P><STRONG><a name="[77]"></a>apUART_Check_RXFIFO_EMPTY</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, peripheral_uart.o(.text.apUART_Check_RXFIFO_EMPTY))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apUART_Check_RXFIFO_EMPTY
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_recv_data
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_port_check_buf_into_lowpower
</UL>

<P><STRONG><a name="[78]"></a>apUART_Check_TXFIFO_EMPTY</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, peripheral_uart.o(.text.apUART_Check_TXFIFO_EMPTY))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apUART_Check_TXFIFO_EMPTY
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_port_check_buf_into_lowpower
</UL>

<P><STRONG><a name="[80]"></a>apUART_Check_TXFIFO_FULL</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, peripheral_uart.o(.text.apUART_Check_TXFIFO_FULL))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apUART_Check_TXFIFO_FULL
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_out
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_handle_task_send_data
</UL>

<P><STRONG><a name="[7d]"></a>apUART_Get_all_raw_int_stat</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, peripheral_uart.o(.text.apUART_Get_all_raw_int_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apUART_Get_all_raw_int_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart1_isr
</UL>

<P><STRONG><a name="[43]"></a>apUART_Initialize</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, peripheral_uart.o(.text.apUART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_config_uart
</UL>

<P><STRONG><a name="[45]"></a>app_low_power_exit_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app.o(.text.app_low_power_exit_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_low_power_exit_callback &rArr; timer_start_main_cmd_data
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_main_cmd_data
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_task
</UL>

<P><STRONG><a name="[d]"></a>app_main</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, main.o(.text.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = app_main &rArr; SYSCTRL_Init &rArr; flash_get_factory_calib_data &rArr; flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_load_private_flash_data
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_evt_callback_table
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_config
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_create_timer
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trim_rf_freq
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_setup_peripherals (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>app_setup_peripherals</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app.o(.text.app_setup_peripherals))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = app_setup_peripherals &rArr; sdk_config_uart1_com &rArr; PINCTRL_SelUartRxdIn &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_EnableRetentionGroupB
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_EnableRetentionGroupA
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_config_uart1_com
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_exit_saving
</UL>

<P><STRONG><a name="[50]"></a>app_setup_peripherals_before_sleep</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, app.o(.text.app_setup_peripherals_before_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_setup_peripherals_before_sleep &rArr; GIO_ConfigIntSource &rArr; map_int_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_Pull
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_WriteValue
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_EnableDeepSleepWakeupSource
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ConfigIntSource
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_query_deep_sleep_allowed (via Veneer)
</UL>

<P><STRONG><a name="[55]"></a>app_start</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app.o(.text.app_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = app_start &rArr; app_setup_peripherals &rArr; sdk_config_uart1_com &rArr; PINCTRL_SelUartRxdIn &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_process_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_setup_peripherals
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_pll_clk_and_sleep_para
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_dev_info
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_config
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_at_power_on_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[5f]"></a>att_db_util_add_attribute_uuid16</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, att_db_util.o(.text.att_db_util_add_attribute_uuid16))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = att_db_util_add_attribute_uuid16 &rArr; att_db_util_assert_space
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_set_end_tag
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_assert_space
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_service_uuid128
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_characteristic_uuid128
</UL>

<P><STRONG><a name="[60]"></a>att_db_util_add_characteristic_uuid128</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, att_db_util.o(.text.att_db_util_add_characteristic_uuid128))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = att_db_util_add_characteristic_uuid128 &rArr; att_db_util_add_attribute_uuid16 &rArr; att_db_util_assert_space
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_128
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_attribute_uuid16
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_attribute_uuid128
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_service_init
</UL>

<P><STRONG><a name="[61]"></a>att_db_util_add_service_uuid128</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, att_db_util.o(.text.att_db_util_add_service_uuid128))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = att_db_util_add_service_uuid128 &rArr; att_db_util_add_attribute_uuid16 &rArr; att_db_util_assert_space
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_128
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_attribute_uuid16
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_service_init
</UL>

<P><STRONG><a name="[d9]"></a>att_db_util_get_address</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, att_db_util.o(.text.att_db_util_get_address))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[62]"></a>att_db_util_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, att_db_util.o(.text.att_db_util_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = att_db_util_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_set_end_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[6b]"></a>baec_msg_handle</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, bt_at_cmd_parse.o(.text.baec_msg_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = baec_msg_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_rx_cmd_process
</UL>

<P><STRONG><a name="[6d]"></a>bt_at_connect_ack</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bt_at_cmd_parse.o(.text.bt_at_connect_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_at_connect_ack &rArr; bt_cmd_data_uart_out &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_out
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_callback
</UL>

<P><STRONG><a name="[6f]"></a>bt_at_disconnect_ack</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bt_at_cmd_parse.o(.text.bt_at_disconnect_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_at_disconnect_ack &rArr; bt_cmd_data_uart_out &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_out
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_event_disconnect
</UL>

<P><STRONG><a name="[59]"></a>bt_at_power_on_ack</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bt_at_cmd_parse.o(.text.bt_at_power_on_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_at_power_on_ack &rArr; bt_cmd_data_uart_out &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_out
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_on_deep_sleep_wakeup (via Veneer)
</UL>

<P><STRONG><a name="[74]"></a>bt_cmd_data_ble_recv_data</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, bt_cmd_data_uart_io_adp.o(.text.bt_cmd_data_ble_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_cmd_data_ble_recv_data &rArr; give_sem_send_data_by_com
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;give_sem_send_data_by_com
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_att_write_callback
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_notification_listen_handler
</UL>

<P><STRONG><a name="[b9]"></a>bt_cmd_data_com_buf_pop_data</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, bt_cmd_data_uart_io_adp.o(.text.bt_cmd_data_com_buf_pop_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bt_cmd_data_com_buf_pop_data
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_i_am_slave_send_data
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_i_am_master_send_data
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_clear_send_data
</UL>

<P><STRONG><a name="[b8]"></a>bt_cmd_data_com_buf_pop_num</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, bt_cmd_data_uart_io_adp.o(.text.bt_cmd_data_com_buf_pop_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bt_cmd_data_com_buf_pop_num
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_i_am_slave_send_data
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_i_am_master_send_data
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_clear_send_data
</UL>

<P><STRONG><a name="[c1]"></a>bt_cmd_data_com_buf_top_pos</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bt_cmd_data_uart_io_adp.o(.text.bt_cmd_data_com_buf_top_pos))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_i_am_slave_send_data
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_i_am_master_send_data
</UL>

<P><STRONG><a name="[56]"></a>bt_cmd_data_process_init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, bt_cmd_data_uart_io_adp.o(.text.bt_cmd_data_process_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_cmd_data_process_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start
</UL>

<P><STRONG><a name="[6e]"></a>bt_cmd_data_uart_out</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bt_cmd_data_uart_io_adp.o(.text.bt_cmd_data_uart_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_cmd_data_uart_out &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_FULL
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_at_power_on_ack
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_at_disconnect_ack
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_at_connect_ack
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_rx_cmd_process
</UL>

<P><STRONG><a name="[7e]"></a>bt_cmd_data_uart_recv_data</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, bt_cmd_data_uart_io_adp.o(.text.bt_cmd_data_uart_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_cmd_data_uart_recv_data &rArr; give_sem_send_data_by_ble
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_RXFIFO_EMPTY
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;give_sem_send_data_by_ble
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;give_sem_process_cmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_rx_data_fun
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart1_isr
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_cmd_data_timer_task
</UL>

<P><STRONG><a name="[c3]"></a>dump_ram_data_in_char</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, app.o(.text.dump_ram_data_in_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dump_ram_data_in_char
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_i_am_master_send_data
</UL>

<P><STRONG><a name="[90]"></a>erase_flash_sector</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, eflash.o(.text.erase_flash_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = erase_flash_sector &rArr; program_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[41]"></a>flash_get_factory_calib_data</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, eflash.o(.text.flash_get_factory_calib_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = flash_get_factory_calib_data &rArr; flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
</UL>

<P><STRONG><a name="[92]"></a>flash_prepare_factory_data</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, eflash.o(.text.flash_prepare_factory_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_data_ready
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_security_data
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_factory_calib_data
</UL>

<P><STRONG><a name="[4c]"></a>low_power_create_timer</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, low_power.o(.text.low_power_create_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = low_power_create_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[a2]"></a>low_power_exit_saving</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, low_power.o(.text.low_power_exit_saving))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = low_power_exit_saving &rArr; app_setup_peripherals &rArr; sdk_config_uart1_com &rArr; PINCTRL_SelUartRxdIn &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_setup_peripherals
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_att_write_callback
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_user_msg_handler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_on_deep_sleep_wakeup (via Veneer)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_notification_listen_handler
</UL>

<P><STRONG><a name="[70]"></a>print_addr</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, app.o(.text.print_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = print_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_at_handle_cona
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_at_handle_addr
</UL>

<P><STRONG><a name="[91]"></a>program_flash</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, eflash.o(.text.program_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = program_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_private_data_write_to_flash
</UL>

<P><STRONG><a name="[8c]"></a>read_flash_security</STRONG> (Thumb, 52 bytes, Stack size 96 bytes, eflash.o(.text.read_flash_security))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = read_flash_security
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_page_read
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_security_data
</UL>

<P><STRONG><a name="[47]"></a>sdk_load_private_flash_data</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, sdk_private_flash_data.o(.text.sdk_load_private_flash_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sdk_load_private_flash_data &rArr; sdk_private_data_write_to_flash &rArr; program_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_rand
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_private_data_write_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[72]"></a>sdk_private_data_write_to_flash</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sdk_private_flash_data.o(.text.sdk_private_data_write_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdk_private_data_write_to_flash &rArr; program_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_load_private_flash_data
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_at_handle_role
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_at_handle_cona
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_at_handle_addr
</UL>

<P><STRONG><a name="[4]"></a>setup_profile</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, profile.o(.text.setup_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = setup_profile &rArr; app_start &rArr; app_setup_peripherals &rArr; sdk_config_uart1_com &rArr; PINCTRL_SelUartRxdIn &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_service_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_add_event_handler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_packet_handler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data.evt_cb_table)
</UL>
<P><STRONG><a name="[63]"></a>throughput_att_read_callback</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, throughput_service.o(.text.throughput_att_read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = throughput_att_read_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback
</UL>

<P><STRONG><a name="[64]"></a>throughput_att_write_callback</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, throughput_service.o(.text.throughput_att_write_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = throughput_att_write_callback &rArr; low_power_exit_saving &rArr; app_setup_peripherals &rArr; sdk_config_uart1_com &rArr; PINCTRL_SelUartRxdIn &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_exit_saving
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_ble_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
</UL>

<P><STRONG><a name="[9a]"></a>throughput_discover_services</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, throughput_service.o(.text.throughput_discover_services))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = throughput_discover_services
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_client_discover_primary_services_by_uuid128
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_am_master_connected_slave
</UL>

<P><STRONG><a name="[dd]"></a>throughput_event_connected</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, throughput_service.o(.text.throughput_event_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = throughput_event_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[be]"></a>throughput_event_disconnect</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, throughput_service.o(.text.throughput_event_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = throughput_event_disconnect &rArr; bt_at_disconnect_ack &rArr; bt_cmd_data_uart_out &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_at_disconnect_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[bf]"></a>throughput_i_am_master_send_data</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, throughput_service.o(.text.throughput_i_am_master_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = throughput_i_am_master_send_data &rArr; dump_ram_data_in_char
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_client_write_value_of_characteristic_without_response
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_client_get_mtu
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_dispatch_client_request_can_send_now_event
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_ram_data_in_char
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_com_buf_top_pos
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_com_buf_pop_num
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_com_buf_pop_data
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_user_msg_handler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[c5]"></a>throughput_i_am_slave_send_data</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, throughput_service.o(.text.throughput_i_am_slave_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = throughput_i_am_slave_send_data &rArr; bt_cmd_data_com_buf_pop_num
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_request_can_send_now_event
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_notify
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_get_mtu
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_can_send_packet_now
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_com_buf_top_pos
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_com_buf_pop_num
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_com_buf_pop_data
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_user_msg_handler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[b4]"></a>throughput_service_init</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, throughput_service.o(.text.throughput_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = throughput_service_init &rArr; att_db_util_add_characteristic_uuid128 &rArr; att_db_util_add_attribute_uuid16 &rArr; att_db_util_assert_space
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_service_uuid128
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_characteristic_uuid128
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[cd]"></a>throughput_user_msg_handler</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, throughput_service.o(.text.throughput_user_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = throughput_user_msg_handler &rArr; throughput_i_am_slave_send_data &rArr; bt_cmd_data_com_buf_pop_num
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_i_am_slave_send_data
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_i_am_master_send_data
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_clear_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[46]"></a>timer_start_main_cmd_data</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, bt_cmd_data_uart_io_adp.o(.text.timer_start_main_cmd_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_start_main_cmd_data
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_low_power_exit_callback
</UL>

<P><STRONG><a name="[8d]"></a>write_flash</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, eflash.o(.text.write_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_security_data
</UL>

<P><STRONG><a name="[df]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ff]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[100]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[101]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[71]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_load_private_flash_data
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_at_handle_role
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_at_handle_cona
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_at_handle_addr
</UL>

<P><STRONG><a name="[102]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[103]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[104]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[3]"></a>cb_putc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cb_putc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_FULL (via Veneer)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data.evt_cb_table)
</UL>
<P><STRONG><a name="[e6]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.ramfunc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>

<P><STRONG><a name="[105]"></a>m_send_char</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, main.o(.ramfunc), UNUSED)

<P><STRONG><a name="[ec]"></a>m_SYSCTRL_GetLastWakeupSource</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, main.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_SYSCTRL_GetLastWakeupSource
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_on_deep_sleep_wakeup
</UL>

<P><STRONG><a name="[e7]"></a>m_SYSCTRL_EnableWakeupSourceDetection</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_SYSCTRL_EnableWakeupSourceDetection &rArr; m_set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_query_deep_sleep_allowed
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8]"></a>cb_assertion</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(.text.cb_assertion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_assertion
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data.evt_cb_table)
</UL>
<P><STRONG><a name="[7]"></a>cb_hard_fault</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, main.o(.text.cb_hard_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cb_hard_fault
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data.evt_cb_table)
</UL>
<P><STRONG><a name="[9]"></a>cb_heap_out_of_mem</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(.text.cb_heap_out_of_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_heap_out_of_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data.evt_cb_table)
</UL>
<P><STRONG><a name="[ee]"></a>m_GIO_EnableRetentionGroupA</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, main.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = m_GIO_EnableRetentionGroupA &rArr; m_GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_query_deep_sleep_allowed
</UL>

<P><STRONG><a name="[ed]"></a>m_GIO_EnableRetentionGroupB</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, main.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = m_GIO_EnableRetentionGroupB &rArr; m_GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_query_deep_sleep_allowed
</UL>

<P><STRONG><a name="[ef]"></a>m_GIO_MaskedWrite</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, main.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = m_GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_GIO_EnableRetentionGroupB
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_GIO_EnableRetentionGroupA
</UL>

<P><STRONG><a name="[eb]"></a>m_apUART_BaudRateSet</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, main.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_apUART_Initialize
</UL>

<P><STRONG><a name="[ea]"></a>m_apUART_Initialize</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, main.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_apUART_Initialize &rArr; m_apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_config_uart
</UL>

<P><STRONG><a name="[e9]"></a>m_config_uart</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, main.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = m_config_uart &rArr; m_apUART_Initialize &rArr; m_apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_apUART_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_setup_peripherals
</UL>

<P><STRONG><a name="[5]"></a>m_on_deep_sleep_wakeup</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, main.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = m_on_deep_sleep_wakeup &rArr; low_power_exit_saving &rArr; app_setup_peripherals &rArr; sdk_config_uart1_com &rArr; PINCTRL_SelUartRxdIn &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_SYSCTRL_GetLastWakeupSource
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_exit_saving (via Veneer)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_at_power_on_ack (via Veneer)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_setup_peripherals
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data.evt_cb_table)
</UL>
<P><STRONG><a name="[6]"></a>m_query_deep_sleep_allowed</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, main.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = m_query_deep_sleep_allowed &rArr; app_setup_peripherals_before_sleep &rArr; GIO_ConfigIntSource &rArr; map_int_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_SYSCTRL_EnableWakeupSourceDetection
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_setup_peripherals_before_sleep (via Veneer)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_GIO_EnableRetentionGroupB
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_GIO_EnableRetentionGroupA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data.evt_cb_table)
</UL>
<P><STRONG><a name="[e8]"></a>m_set_reg_bit</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, main.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = m_set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_SYSCTRL_EnableWakeupSourceDetection
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_setup_peripherals
</UL>

<P><STRONG><a name="[49]"></a>m_setup_peripherals</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, main.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = m_setup_peripherals &rArr; m_config_uart &rArr; m_apUART_Initialize &rArr; m_apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_set_reg_bit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_config_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_on_deep_sleep_wakeup
</UL>

<P><STRONG><a name="[4b]"></a>trim_rf_freq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.trim_rf_freq))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[cf]"></a>adv_user_msg_handler</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, profile.o(.text.adv_user_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adv_user_msg_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[14]"></a>att_read_callback</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, profile.o(.text.att_read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = att_read_callback &rArr; throughput_att_read_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_att_read_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.setup_profile)
</UL>
<P><STRONG><a name="[15]"></a>att_write_callback</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, profile.o(.text.att_write_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = att_write_callback &rArr; throughput_att_write_callback &rArr; low_power_exit_saving &rArr; app_setup_peripherals &rArr; sdk_config_uart1_com &rArr; PINCTRL_SelUartRxdIn &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_att_write_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.setup_profile)
</UL>
<P><STRONG><a name="[65]"></a>auto_connect</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, profile.o(.text.auto_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = auto_connect &rArr; initiating
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_scan_enable
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_disconnect
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_clear_white_lists
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_add_whitelist
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initiating
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_user_msg_handler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_am_master_disconnected_slave
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_initiating
</UL>

<P><STRONG><a name="[d1]"></a>btstack_event_state_get_state</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.btstack_event_state_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = btstack_event_state_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[88]"></a>cancel_initiating</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, profile.o(.text.cancel_initiating))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cancel_initiating &rArr; auto_connect &rArr; initiating
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_create_connection_cancel
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_user_msg_handler
</UL>

<P><STRONG><a name="[13]"></a>conn_timer_callback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, profile.o(.text.conn_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = conn_timer_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.setup_profile)
</UL>
<P><STRONG><a name="[d5]"></a>hci_event_le_meta_get_subevent_code</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.hci_event_le_meta_get_subevent_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_le_meta_get_subevent_code
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[d0]"></a>hci_event_packet_get_type</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.hci_event_packet_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_packet_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[de]"></a>hci_event_packet_get_user_msg</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.hci_event_packet_get_user_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_packet_get_user_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[98]"></a>i_am_master_connected_slave</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, profile.o(.text.i_am_master_connected_slave))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i_am_master_connected_slave &rArr; throughput_discover_services
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_discover_services
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[9b]"></a>i_am_master_disconnected_slave</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, profile.o(.text.i_am_master_disconnected_slave))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = i_am_master_disconnected_slave &rArr; auto_connect &rArr; initiating
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[dc]"></a>i_am_slave_connected_master</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, profile.o(.text.i_am_slave_connected_master))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i_am_slave_connected_master
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[9c]"></a>i_am_slave_disconnected_master</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, profile.o(.text.i_am_slave_disconnected_master))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = i_am_slave_disconnected_master &rArr; setup_adv
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_enable
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[6a]"></a>initiating</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, profile.o(.text.initiating))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = initiating
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_ext_create_connection
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_connect
</UL>

<P><STRONG><a name="[a4]"></a>profile_user_msg_handler</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, profile.o(.text.profile_user_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = profile_user_msg_handler &rArr; low_power_exit_saving &rArr; app_setup_peripherals &rArr; sdk_config_uart1_com &rArr; PINCTRL_SelUartRxdIn &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_32k_rc_auto_tune
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_enable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_initiating
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_connect
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_config
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_exit_saving
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[9d]"></a>setup_adv</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, profile.o(.text.setup_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = setup_adv
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_scan_response_data
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_para
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_data
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_adv_set_random_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_am_slave_disconnected_master
</UL>

<P><STRONG><a name="[1c]"></a>stack_on_first_wake_up</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, profile.o(.text.stack_on_first_wake_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stack_on_first_wake_up
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.user_packet_handler)
</UL>
<P><STRONG><a name="[ce]"></a>user_msg_handler</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, profile.o(.text.user_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = user_msg_handler &rArr; profile_user_msg_handler &rArr; low_power_exit_saving &rArr; app_setup_peripherals &rArr; sdk_config_uart1_com &rArr; PINCTRL_SelUartRxdIn &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_user_msg_handler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_user_msg_handler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_user_msg_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[16]"></a>user_packet_handler</STRONG> (Thumb, 484 bytes, Stack size 40 bytes, profile.o(.text.user_packet_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = user_packet_handler &rArr; user_msg_handler &rArr; profile_user_msg_handler &rArr; low_power_exit_saving &rArr; app_setup_peripherals &rArr; sdk_config_uart1_com &rArr; PINCTRL_SelUartRxdIn &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_i_am_slave_send_data
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_i_am_master_send_data
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_event_disconnect
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_event_connected
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_addr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_timer
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_calibrate_32k
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hint_on_ce_len
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_client_is_ready
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_random_device_address
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_scan_para
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_read_remote_used_features
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_set_db
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_get_address
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_am_slave_disconnected_master
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_am_slave_connected_master
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_am_master_disconnected_slave
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_am_master_connected_slave
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_packet_get_user_msg
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_packet_get_type
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_le_meta_get_subevent_code
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_event_state_get_state
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_connect
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.setup_profile)
</UL>
<P><STRONG><a name="[53]"></a>app_setup_uart1_isr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app.o(.text.app_setup_uart1_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_setup_uart1_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_irq_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_config_uart1_com
</UL>

<P><STRONG><a name="[e]"></a>bt_cmd_data_uart1_isr</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, app.o(.text.bt_cmd_data_uart1_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_cmd_data_uart1_isr &rArr; bt_cmd_data_uart_recv_data &rArr; give_sem_send_data_by_ble
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_recv_data
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Get_all_raw_int_stat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text.app_setup_uart1_isr)
</UL>
<P><STRONG><a name="[58]"></a>print_dev_info</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, app.o(.text.print_dev_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = print_dev_info
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start
</UL>

<P><STRONG><a name="[a7]"></a>sdk_config_uart</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, app.o(.text.sdk_config_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sdk_config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_config_uart1_com
</UL>

<P><STRONG><a name="[4f]"></a>sdk_config_uart1_com</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, app.o(.text.sdk_config_uart1_com))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = sdk_config_uart1_com &rArr; PINCTRL_SelUartRxdIn &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelUartRxdIn
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_Pull
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_config_uart
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_setup_uart1_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_setup_peripherals
</UL>

<P><STRONG><a name="[57]"></a>setup_pll_clk_and_sleep_para</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, app.o(.text.setup_pll_clk_and_sleep_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setup_pll_clk_and_sleep_para &rArr; SYSCTRL_EnableSlowRC &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_config
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_EnableSlowRC
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_EnableConfigClocksAfterWakeup
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_config
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start
</UL>

<P><STRONG><a name="[8b]"></a>copy_security_data</STRONG> (Thumb, 122 bytes, Stack size 96 bytes, eflash.o(.text.copy_security_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = copy_security_data &rArr; read_flash_security
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[93]"></a>is_data_ready</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, eflash.o(.text.is_data_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_data_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[a6]"></a>security_page_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eflash.o(.text.security_page_read))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
</UL>

<P><STRONG><a name="[2f]"></a>GIO_MaskedWrite</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, peripheral_gpio.o(.text.GIO_MaskedWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_EnableRetentionGroupB
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_EnableRetentionGroupA
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_EnableDeepSleepWakeupSource
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ConfigIntSource
</UL>

<P><STRONG><a name="[2e]"></a>map_int_mode</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, peripheral_gpio.o(.text.map_int_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = map_int_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ConfigIntSource
</UL>

<P><STRONG><a name="[34]"></a>PINCTRL_SelInput</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, peripheral_pinctrl.o(.text.PINCTRL_SelInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_id_for_input_source
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelUartRxdIn
</UL>

<P><STRONG><a name="[36]"></a>pin_id_for_input_source</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, peripheral_pinctrl.o(.text.pin_id_for_input_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pin_id_for_input_source
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelInput
</UL>

<P><STRONG><a name="[35]"></a>set_reg_bits</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, peripheral_pinctrl.o(.text.set_reg_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelInput
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
</UL>

<P><STRONG><a name="[39]"></a>source_id_on_pin</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, peripheral_pinctrl.o(.text.source_id_on_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = source_id_on_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
</UL>

<P><STRONG><a name="[3b]"></a>SYSCTRL_ClkGateCtrl</STRONG> (Thumb, 902 bytes, Stack size 32 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClkGateCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>

<P><STRONG><a name="[3d]"></a>set_reg_bit</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, peripheral_sysctrl.o(.text.set_reg_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_EnableSlowRC
</UL>

<P><STRONG><a name="[3f]"></a>set_reg_bits</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.set_reg_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SetLDOOutput
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_EnableSlowRC
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
</UL>

<P><STRONG><a name="[5a]"></a>att_db_util_add_attribute_uuid128</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, att_db_util.o(.text.att_db_util_add_attribute_uuid128))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = att_db_util_add_attribute_uuid128 &rArr; att_db_util_assert_space
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_128
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_set_end_tag
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_assert_space
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_characteristic_uuid128
</UL>

<P><STRONG><a name="[5b]"></a>att_db_util_assert_space</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, att_db_util.o(.text.att_db_util_assert_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = att_db_util_assert_space
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_attribute_uuid16
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_attribute_uuid128
</UL>

<P><STRONG><a name="[5e]"></a>att_db_util_set_end_tag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, att_db_util.o(.text.att_db_util_set_end_tag))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_attribute_uuid16
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_attribute_uuid128
</UL>

<P><STRONG><a name="[76]"></a>bt_cmd_data_port_check_buf_into_lowpower</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, bt_cmd_data_uart_io_adp.o(.text.bt_cmd_data_port_check_buf_into_lowpower))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bt_cmd_data_port_check_buf_into_lowpower &rArr; apUART_Check_TXFIFO_EMPTY
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_EMPTY
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_RXFIFO_EMPTY
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process_task
</UL>

<P><STRONG><a name="[79]"></a>bt_cmd_data_print_buf_state</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bt_cmd_data_uart_io_adp.o(.text.bt_cmd_data_print_buf_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bt_cmd_data_print_buf_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_rx_cmd_process
</UL>

<P><STRONG><a name="[7f]"></a>bt_cmd_data_uart_handle_task_send_data</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, bt_cmd_data_uart_io_adp.o(.text.bt_cmd_data_uart_handle_task_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bt_cmd_data_uart_handle_task_send_data &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_FULL
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process_task
</UL>

<P><STRONG><a name="[85]"></a>bt_cmd_data_uart_rx_cmd_process</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, bt_cmd_data_uart_io_adp.o(.text.bt_cmd_data_uart_rx_cmd_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bt_cmd_data_uart_rx_cmd_process &rArr; baec_msg_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_out
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baec_msg_handle
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;give_sem_send_data_by_ble
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_print_buf_state
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process_task
</UL>

<P><STRONG><a name="[82]"></a>bt_cmd_data_uart_rx_data_fun</STRONG> (Thumb, 122 bytes, Stack size 4 bytes, bt_cmd_data_uart_io_adp.o(.text.bt_cmd_data_uart_rx_data_fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bt_cmd_data_uart_rx_data_fun
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_recv_data
</UL>

<P><STRONG><a name="[10]"></a>cmd_process_task</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, bt_cmd_data_uart_io_adp.o(.text.cmd_process_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = cmd_process_task &rArr; bt_cmd_data_uart_rx_cmd_process &rArr; baec_msg_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_rx_cmd_process
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_handle_task_send_data
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_port_check_buf_into_lowpower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_cmd_data_uart_io_adp.o(.text.bt_cmd_data_process_init)
</UL>
<P><STRONG><a name="[84]"></a>give_sem_process_cmd</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bt_cmd_data_uart_io_adp.o(.text.give_sem_process_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = give_sem_process_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_recv_data
</UL>

<P><STRONG><a name="[83]"></a>give_sem_send_data_by_ble</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bt_cmd_data_uart_io_adp.o(.text.give_sem_send_data_by_ble))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = give_sem_send_data_by_ble
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_recv_data
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_rx_cmd_process
</UL>

<P><STRONG><a name="[75]"></a>give_sem_send_data_by_com</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bt_cmd_data_uart_io_adp.o(.text.give_sem_send_data_by_com))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = give_sem_send_data_by_com
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_ble_recv_data
</UL>

<P><STRONG><a name="[f]"></a>main_cmd_data_timer_task</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bt_cmd_data_uart_io_adp.o(.text.main_cmd_data_timer_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = main_cmd_data_timer_task &rArr; bt_cmd_data_uart_recv_data &rArr; give_sem_send_data_by_ble
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_recv_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_cmd_data_uart_io_adp.o(.text.bt_cmd_data_process_init)
</UL>
<P><STRONG><a name="[11]"></a>enter_low_power_timer_callback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, low_power.o(.text.enter_low_power_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = enter_low_power_timer_callback &rArr; low_power_enter_saving &rArr; low_power_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_WatchDogRestart
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_enter_saving
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_power.o(.text.low_power_create_timer)
</UL>
<P><STRONG><a name="[8f]"></a>low_power_enter_saving</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, low_power.o(.text.low_power_enter_saving))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = low_power_enter_saving &rArr; low_power_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_low_power_timer_callback
</UL>

<P><STRONG><a name="[a1]"></a>low_power_start_timer</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, low_power.o(.text.low_power_start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = low_power_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_task
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_enter_saving
</UL>

<P><STRONG><a name="[12]"></a>low_power_task</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, low_power.o(.text.low_power_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = low_power_task &rArr; app_low_power_exit_callback &rArr; timer_start_main_cmd_data
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_low_power_exit_callback
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_config
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_start_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_power.o(.text.low_power_create_timer)
</UL>
<P><STRONG><a name="[19]"></a>btstack_callback</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, throughput_service.o(.text.btstack_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btstack_callback &rArr; bt_at_connect_ack &rArr; bt_cmd_data_uart_out &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_at_connect_ack
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_event_query_complete_parse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> throughput_service.o(.text.throughput_descriptor_discovery_callback)
</UL>
<P><STRONG><a name="[ba]"></a>gatt_event_all_characteristic_descriptors_query_result_parse</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, throughput_service.o(.text.gatt_event_all_characteristic_descriptors_query_result_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gatt_event_all_characteristic_descriptors_query_result_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_descriptor_discovery_callback
</UL>

<P><STRONG><a name="[b5]"></a>gatt_event_characteristic_query_result_parse</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, throughput_service.o(.text.gatt_event_characteristic_query_result_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gatt_event_characteristic_query_result_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_characteristic_discovery_callback
</UL>

<P><STRONG><a name="[ca]"></a>gatt_event_notification_parse</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, throughput_service.o(.text.gatt_event_notification_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gatt_event_notification_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_notification_listen_handler
</UL>

<P><STRONG><a name="[87]"></a>gatt_event_query_complete_parse</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, throughput_service.o(.text.gatt_event_query_complete_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gatt_event_query_complete_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_service_discovery_callback
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_descriptor_discovery_callback
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_characteristic_discovery_callback
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_callback
</UL>

<P><STRONG><a name="[cb]"></a>gatt_event_service_query_result_parse</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, throughput_service.o(.text.gatt_event_service_query_result_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gatt_event_service_query_result_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_service_discovery_callback
</UL>

<P><STRONG><a name="[94]"></a>get_sig_short_uuid</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, throughput_service.o(.text.get_sig_short_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_sig_short_uuid
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_has_bluetooth_prefix
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_endian_read_32
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_descriptor_discovery_callback
</UL>

<P><STRONG><a name="[1b]"></a>throughput_characteristic_discovery_callback</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, throughput_service.o(.text.throughput_characteristic_discovery_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = throughput_characteristic_discovery_callback &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_client_discover_characteristic_descriptors
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_disconnect
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_event_query_complete_parse
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_event_characteristic_query_result_parse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> throughput_service.o(.text.throughput_service_discovery_callback)
</UL>
<P><STRONG><a name="[b7]"></a>throughput_clear_send_data</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, throughput_service.o(.text.throughput_clear_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = throughput_clear_send_data &rArr; bt_cmd_data_com_buf_pop_num
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_com_buf_pop_num
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_com_buf_pop_data
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throughput_user_msg_handler
</UL>

<P><STRONG><a name="[17]"></a>throughput_descriptor_discovery_callback</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, throughput_service.o(.text.throughput_descriptor_discovery_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = throughput_descriptor_discovery_callback &rArr; get_sig_short_uuid
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_client_write_characteristic_descriptor_using_descriptor_handle
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_client_listen_for_characteristic_value_updates
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sig_short_uuid
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_event_query_complete_parse
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_event_all_characteristic_descriptors_query_result_parse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> throughput_service.o(.text.throughput_characteristic_discovery_callback)
</UL>
<P><STRONG><a name="[18]"></a>throughput_notification_listen_handler</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, throughput_service.o(.text.throughput_notification_listen_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = throughput_notification_listen_handler &rArr; low_power_exit_saving &rArr; app_setup_peripherals &rArr; sdk_config_uart1_com &rArr; PINCTRL_SelUartRxdIn &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_exit_saving
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_event_notification_parse
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_ble_recv_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> throughput_service.o(.text.throughput_descriptor_discovery_callback)
</UL>
<P><STRONG><a name="[1a]"></a>throughput_service_discovery_callback</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, throughput_service.o(.text.throughput_service_discovery_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = throughput_service_discovery_callback &rArr; gatt_event_service_query_result_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_client_discover_characteristics_for_service
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_disconnect
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_event_service_query_result_parse
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_event_query_complete_parse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> throughput_service.o(.text.throughput_discover_services)
</UL>
<P><STRONG><a name="[2]"></a>bt_at_handle_addr</STRONG> (Thumb, 400 bytes, Stack size 80 bytes, bt_at_cmd_parse.o(.text.bt_at_handle_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bt_at_handle_addr &rArr; sdk_private_data_write_to_flash &rArr; program_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_addr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_private_data_write_to_flash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_at_cmd_parse.o(.data.at_set_body)
</UL>
<P><STRONG><a name="[0]"></a>bt_at_handle_cona</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, bt_at_cmd_parse.o(.text.bt_at_handle_cona))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bt_at_handle_cona &rArr; sdk_private_data_write_to_flash &rArr; program_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_addr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_private_data_write_to_flash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_at_cmd_parse.o(.data.at_set_body)
</UL>
<P><STRONG><a name="[1]"></a>bt_at_handle_role</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, bt_at_cmd_parse.o(.text.bt_at_handle_role))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_at_handle_role &rArr; sdk_private_data_write_to_flash &rArr; program_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_private_data_write_to_flash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_at_cmd_parse.o(.data.at_set_body)
</UL>
<P><STRONG><a name="[e1]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e0]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[e4]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e3]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
